diff --git a/node_modules/@sphereon/pex/dist/main/lib/evaluation/handlers/uriEvaluationHandler.js b/node_modules/@sphereon/pex/dist/main/lib/evaluation/handlers/uriEvaluationHandler.js
index b035d3c..185ccef 100644
--- a/node_modules/@sphereon/pex/dist/main/lib/evaluation/handlers/uriEvaluationHandler.js
+++ b/node_modules/@sphereon/pex/dist/main/lib/evaluation/handlers/uriEvaluationHandler.js
@@ -31,10 +31,12 @@ class UriEvaluationHandler extends abstractEvaluationHandler_1.AbstractEvaluatio
             });
         });
         const definitionAllowsDataIntegrity = ((_a = definition.format) === null || _a === void 0 ? void 0 : _a.di) || ((_b = definition.format) === null || _b === void 0 ? void 0 : _b.di_vc) || ((_c = definition.format) === null || _c === void 0 ? void 0 : _c.di_vp);
-        const descriptorMap = this.getResults()
-            .filter((result) => result.status === ConstraintUtils_1.Status.INFO)
+        const results = this.getResults();
+        console.log("results from getResults() :::", JSON.stringify(results, null, 2));
+
+        const descriptorMap = results.filter((result) => result.status === ConstraintUtils_1.Status.INFO)
             .map((result) => {
-            console.log(" inside handle function  of uriEvaluationHandler.js :: result,", result)
+            console.log("inside handle function  of uriEvaluationHandler.js :: result,", JSON.stringify(result, null, 2));
             var _a, _b, _c, _d;
             let format = (_a = result.payload) === null || _a === void 0 ? void 0 : _a.format;
             // This checks if the new data integrity format should be used.
@@ -60,12 +62,9 @@ class UriEvaluationHandler extends abstractEvaluationHandler_1.AbstractEvaluatio
                 }
             }
 
-            console.log("jsonpath_1.JSONPath.nodes(definition, result.input_descriptor_path)[0]::", JSON.stringify(jsonpath_1.JSONPath.nodes(definition, result.input_descriptor_path)[0],null,2))
-            console.log("jsonpath_1.JSONPath.nodes(definition, result.input_descriptor_path)[0].value::", JSON.stringify(jsonpath_1.JSONPath.nodes(definition, result.input_descriptor_path)[0].value,null,2))
-
+            console.log("searching input_descriptor_path in definition :: jsonpath_1.JSONPath.nodes(definition, result.input_descriptor_path)::", JSON.stringify(result.input_descriptor_path,null,2))
             const inputDescriptor = jsonpath_1.JSONPath.nodes(definition, result.input_descriptor_path)[0].value;
            
-           
             return {
                 id: inputDescriptor.id,
                 format,
