diff --git a/node_modules/@credo-ts/core/build/agent/AgentConfig.js b/node_modules/@credo-ts/core/build/agent/AgentConfig.js
index 39b2108..77568bb 100644
--- a/node_modules/@credo-ts/core/build/agent/AgentConfig.js
+++ b/node_modules/@credo-ts/core/build/agent/AgentConfig.js
@@ -34,6 +34,7 @@ class AgentConfig {
         return (_a = this.initConfig.useDidKeyInProtocols) !== null && _a !== void 0 ? _a : true;
     }
     get endpoints() {
+        this.logger.debug(`123--------debug logs------AgentConfig : endpoints ${this.endpoints}`);
         // if endpoints is not set, return queue endpoint
         // https://github.com/hyperledger/aries-rfcs/issues/405#issuecomment-582612875
         if (!this._endpoints || this._endpoints.length === 0) {
diff --git a/node_modules/@credo-ts/core/build/agent/Dispatcher.js b/node_modules/@credo-ts/core/build/agent/Dispatcher.js
index 144e85e..8af3d09 100644
--- a/node_modules/@credo-ts/core/build/agent/Dispatcher.js
+++ b/node_modules/@credo-ts/core/build/agent/Dispatcher.js
@@ -103,6 +103,7 @@ let Dispatcher = class Dispatcher {
             }
         }
         if (outboundMessage) {
+            this.logger.debug(`123--------debug logs------sending outbound message`);
             // set the inbound message context, if not already defined
             if (!outboundMessage.inboundMessageContext) {
                 outboundMessage.inboundMessageContext = messageContext;
diff --git a/node_modules/@credo-ts/core/build/agent/EnvelopeService.js b/node_modules/@credo-ts/core/build/agent/EnvelopeService.js
index 11847c1..3100092 100644
--- a/node_modules/@credo-ts/core/build/agent/EnvelopeService.js
+++ b/node_modules/@credo-ts/core/build/agent/EnvelopeService.js
@@ -22,6 +22,7 @@ let EnvelopeService = class EnvelopeService {
         this.logger = logger;
     }
     async packMessage(agentContext, payload, keys) {
+        this.logger.debug(`123--------debug logs------EnvelopService : packMessage`);
         const { recipientKeys, routingKeys, senderKey } = keys;
         let recipientKeysBase58 = recipientKeys.map((key) => key.publicKeyBase58);
         const routingKeysBase58 = routingKeys.map((key) => key.publicKeyBase58);
@@ -30,6 +31,7 @@ let EnvelopeService = class EnvelopeService {
         const message = payload.toJSON({ useDidSovPrefixWhereAllowed: agentContext.config.useDidSovPrefixWhereAllowed });
         this.logger.debug(`Pack outbound message ${message['@type']}`);
         let encryptedMessage = await agentContext.wallet.pack(message, recipientKeysBase58, senderKeyBase58 !== null && senderKeyBase58 !== void 0 ? senderKeyBase58 : undefined);
+        this.logger.debug(`123--------debug logs------EnvelopService : encryptedMessage ${encryptedMessage}`);
         // If the message has routing keys (mediator) pack for each mediator
         for (const routingKeyBase58 of routingKeysBase58) {
             console.log(`message['@type']`, JSON.stringify(message['@type']))
diff --git a/node_modules/@credo-ts/core/build/agent/MessageSender.js b/node_modules/@credo-ts/core/build/agent/MessageSender.js
index 29d910e..0bbe26b 100644
--- a/node_modules/@credo-ts/core/build/agent/MessageSender.js
+++ b/node_modules/@credo-ts/core/build/agent/MessageSender.js
@@ -60,6 +60,7 @@ let MessageSender = class MessageSender {
         await outboundTransport.stop();
     }
     async packMessage(agentContext, { keys, message, endpoint, }) {
+        this.logger.debug(`123--------debug logs------packMessage`);
         const encryptedMessage = await this.envelopeService.packMessage(agentContext, message, keys);
         return {
             payload: encryptedMessage,
@@ -108,6 +109,7 @@ let MessageSender = class MessageSender {
                     const protocolScheme = (0, uri_1.getProtocolScheme)(service.serviceEndpoint);
                     for (const transport of this.outboundTransports) {
                         if (transport.supportedSchemes.includes(protocolScheme)) {
+                            this.logger.debug(`123--------debug logs------sendPackage`);
                             await transport.sendMessage({
                                 payload: encryptedMessage,
                                 endpoint: service.serviceEndpoint,
@@ -158,6 +160,7 @@ let MessageSender = class MessageSender {
         const { agentContext, connection, outOfBand, message } = outboundMessageContext;
         const errors = [];
         if (outboundMessageContext.isOutboundServiceMessage()) {
+            this.logger.debug(`123--------debug logs------sendMessageToService`);
             return this.sendMessageToService(outboundMessageContext);
         }
         if (!connection) {
@@ -308,6 +311,7 @@ let MessageSender = class MessageSender {
         }
         // If there is no session try sending to service instead
         try {
+            this.logger.debug(`123--------debug logs------MessageSender : sendToService`);
             await this.sendToService(outboundMessageContext);
             this.emitMessageSentEvent(outboundMessageContext, models_1.OutboundMessageSendStatus.SentToTransport);
         }
